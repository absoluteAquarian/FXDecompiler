int64_t fcn_180008170 (void) {
    if (ecx <= 0x39) {
        rax = (int64_t) ecx;
        r8 = 0x180000000;
        ecx = *((r8 + rax*4 + 0x8338));
        rcx += r8;
        /* switch table (58 cases) at 0x180008338 */
        void (*rcx)() ();
        rax = "void";
        return rax;
        rax = "bool";
        return rax;
        rax = 0x1803833f4;
        return rax;
        rax = "uint";
        return rax;
        rax = "byte";
        return rax;
        rax = "float";
        return rax;
        rax = "string";
        return rax;
        rax = "Buffer";
        return rax;
        rax = "Texture";
        return rax;
        rax = "Texture1D";
        return rax;
        rax = "Texture1DArray";
        return rax;
        rax = "Texture2D";
        return rax;
        rax = "Texture2DMS";
        return rax;
        rax = "Texture2DArray";
        return rax;
        rax = "Texture2DMSArray";
        return rax;
        rax = "Texture3D";
        return rax;
        rax = "TextureCube";
        return rax;
        rax = "TextureCubeArray";
        return rax;
        rcx = "sampler";
        rax = "SamplerState";
        if (dl != 0) {
            rax = rcx;
        }
        return rax;
        rax = "sampler1D";
        return rax;
        rax = "sampler2D";
        return rax;
        rax = "sampler3D";
        return rax;
        rax = "samplerCUBE";
        return rax;
        rax = "PixelShader";
        return rax;
        rax = "VertexShader";
        return rax;
        rax = "GeometryShader";
        return rax;
        rax = "HullShader";
        return rax;
        rax = "DomainShader";
        return rax;
        rax = "RasterizerState";
        return rax;
        rax = "DepthStencilState";
        return rax;
        rax = "BlendState";
        return rax;
        rax = "RenderTargetView";
        return rax;
        rax = "DepthStencilView";
        return rax;
        rax = "pixelfragment";
        return rax;
        rax = "vertexfragment";
        return rax;
        rax = "interface";
        return rax;
        rax = "ComputeShader";
        return rax;
        rax = "double";
        return rax;
        rax = "min8float";
        return rax;
        rax = "min10float";
        return rax;
        rax = "min16float";
        return rax;
        rax = "min12int";
        return rax;
        rax = "min16int";
        return rax;
        rax = "min16uint";
        return rax;
    }
    rax = "UNKNOWN";
    return rax;
}
