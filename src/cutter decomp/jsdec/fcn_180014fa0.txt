int64_t fcn_180014fa0 (void) {
    const char * var_19h;
    int64_t var_11h;
    int64_t var_9h;
    const char * var_1h;
    const char * var_7h;
    const char * var_fh;
    int64_t var_17h;
    int64_t var_20h;
    int64_t var_30h;
    int64_t var_80h;
    int64_t var_88h;
    int64_t var_90h;
    int64_t var_d0h;
    rbp = rsp - 0x3f;
    rax = *(0x180426020);
    rax ^= rsp;
    var_17h = rax;
    r14 = rdx;
    r15 = *((rdx + 0x78));
    rsi = rcx;
    if (*((rcx + 0x18)) != 0) {
        r8 = *(str.a0a0a0);
        rdx = "<font color = \"#%s\">";
        fcn_1800ecdb0 ();
        *((rsi + 0x20))++;
    }
    var_d0h = rbx;
    var_90h = rdi;
    var_88h = r12;
    var_80h = r13;
    if (r15 == 0) {
        goto label_0;
    }
    if (*((rsi + 0x1e)) != 0) {
        goto label_0;
    }
    if (*(0x180427984) == 0) {
        rdx = 0x1803836f8;
        rcx = rsi;
        fcn_1800ecdb0 ();
        rdx = "// Generated by ";
        rcx = rsi;
        fcn_1800ecdb0 ();
        rax = *(r15);
        rcx = r15;
        rax = *((rax + 0x60));
        rax = uint64_t (*case.0x180337eae.0)() ();
        if (rax != 0) {
            rax = *(r15);
            rcx = r15;
            rax = *((rax + 0x60));
            rax = uint64_t (*case.0x180337eae.0)() ();
            rdx = 0x180387098;
            rcx = rsi;
            r8 = rax;
            fcn_1800ecdb0 ();
        } else {
            rdx = "Microsoft (R) D3D Shader Disassembler\n";
            rcx = rsi;
            fcn_1800ecdb0 ();
        }
        rdx = 0x1803836f8;
        rcx = rsi;
        fcn_1800ecdb0 ();
    }
    r8 = *((r14 + 0x80));
    if (r8 != 0) {
        rdx = 0x180383698;
        rcx = rsi;
        fcn_1800ecdb0 ();
    }
    if ((*((r14 + 0x18)) & 1) != 0) {
        rdx = 0x1803836f8;
        rcx = rsi;
        fcn_1800ecdb0 ();
        rdx = "// Note: SHADER WILL ONLY WORK WITH THE DEBUG SDK LAYER ENABLED.\n";
        rcx = rsi;
        fcn_1800ecdb0 ();
        rdx = 0x1803836f8;
        rcx = rsi;
        fcn_1800ecdb0 ();
    }
    if (*((rsi + 0x1e)) != 0) {
        goto label_0;
    }
    rax = *(r15);
    rcx = r15;
    rax = *((rax + 0x50));
    rax = uint64_t (*case.0x180337eae.0)() ();
    r13 = rax;
    if (rax == 0) {
        goto label_1;
    }
    rdx = 0x1803836f8;
    rcx = rsi;
    fcn_1800ecdb0 ();
    rdx = "// Note: shader requires additional functionality:\n";
    rcx = rsi;
    fcn_1800ecdb0 ();
    ebx = 1;
    rdi = str_Double_precision_floating_point;
    r12d = rbx + 0xd;
    do {
        r8 = *(rdi);
        if (r8 != 0) {
            if ((r13 & rbx) == 0) {
                goto label_2;
            }
            rdx = "//       %s\n";
            rcx = rsi;
            fcn_1800ecdb0 ();
        }
label_2:
        rbx = rotate_left64 (rbx, 1);
        rdi += 8;
        r12--;
    } while (r12 != 0);
    rdx = 0x1803836f8;
    rcx = rsi;
    fcn_1800ecdb0 ();
label_1:
    r9 = *((r14 + 0x20));
    if (r9 == 0) {
        goto label_3;
    }
    r10 = *((r14 + 0x28));
    if (r10 == 0) {
        goto label_3;
    }
    r8d = *((r9 + 0x1c));
    edx = 0;
    if (r8d == 0) {
        goto label_3;
    }
    do {
        eax = *((r10 + rdx*4));
        rax += r9;
        if (*(rax) == 0x46454452) {
            goto label_4;
        }
        edx++;
    } while (edx < r8d);
    goto label_3;
label_4:
    if (edx != 0xffffffff) {
        if (r8d <= edx) {
            goto label_3;
        }
        rax += 8;
        if (rax == 0) {
            goto label_3;
        }
        rax = *(r15);
        rcx = r15;
        rax = *((rax + 0x70));
        eax = uint64_t (*case.0x180337eae.0)() ();
        rcx = *(r15);
        ebx = eax;
        rax = *((rcx + 0x68));
        rcx = r15;
        eax = uint64_t (*case.0x180337eae.0)() ();
        r9d = ebx;
        rdx = r15;
        r8d = eax;
        rcx = rsi;
        eax = fcn_180008840 ();
        if (eax < 0) {
            goto label_5;
        }
    }
label_3:
    r8 = *((r14 + 0x20));
    if (r8 == 0) {
        goto label_6;
    }
    r10 = *((r14 + 0x28));
    if (r10 == 0) {
        goto label_6;
    }
    r9d = *((r8 + 0x1c));
    edx = 0;
    if (r9d == 0) {
        goto label_6;
    }
    do {
        ecx = *((r10 + rdx*4));
        if (*((rcx + r8)) == 0x47534350) {
            goto label_7;
        }
        edx++;
    } while (edx < r9d);
label_6:
    edx = 0xffffffff;
label_7:
    if (edx != 0xffffffff) {
        goto label_8;
    }
    if (r8 == 0) {
        goto label_9;
    }
    r10 = *((r14 + 0x28));
    if (r10 == 0) {
        goto label_9;
    }
    r9d = *((r8 + 0x1c));
    edx = 0;
    if (r9d == 0) {
        goto label_9;
    }
    do {
        ecx = *((r10 + rdx*4));
        if (*((rcx + r8)) == 0x31475350) {
            goto label_10;
        }
        edx++;
    } while (edx < r9d);
label_9:
    edx = 0xffffffff;
label_10:
    if (edx != 0xffffffff) {
label_8:
        if (r8 == 0) {
            goto label_11;
        }
        rcx = *((r14 + 0x28));
        if (rcx == 0) {
            goto label_12;
        }
        if (*((r8 + 0x1c)) <= edx) {
            goto label_12;
        }
        eax = edx;
        ecx = *((rcx + rax*4));
        rax = r8 + 8;
        rax += rcx;
        if (rax == 0) {
            goto label_12;
        }
        rax = *(r15);
        rcx = r15;
        rax = *((rax + 0x58));
        eax = uint64_t (*case.0x180337eae.0)() ();
        eax &= 0xffff0000;
        rcx = r15;
        rax = *(r15);
        dil = (eax == 0x40000) ? 1 : 0;
        rax = *((rax + 0x18));
        rax = uint64_t (*case.0x180337eae.0)() ();
        rcx = *(r15);
        rbx = rax;
        rax = *((rcx + 8));
        rcx = r15;
        rax = uint64_t (*case.0x180337eae.0)() ();
        r9d = *((rbx + 0x7c));
        r8 = rax;
        var_30h = dil;
        rax = 0x180017c60;
        var_20h = rax;
        eax = fcn_180009790 (rsi, "Patch Constant", r8);
        if (eax < 0) {
            goto label_5;
        }
    }
label_12:
    r8 = *((r14 + 0x20));
    if (r8 == 0) {
        goto label_11;
    }
    r10 = *((r14 + 0x28));
    if (r10 == 0) {
        goto label_11;
    }
    r9d = *((r8 + 0x1c));
    edx = 0;
    if (r9d == 0) {
        goto label_11;
    }
    do {
        ecx = *((r10 + rdx*4));
        if (*((rcx + r8)) == 0x4e475349) {
            goto label_13;
        }
        edx++;
    } while (edx < r9d);
label_11:
    edx = 0xffffffff;
label_13:
    if (edx != 0xffffffff) {
        goto label_14;
    }
    if (r8 == 0) {
        goto label_15;
    }
    r10 = *((r14 + 0x28));
    if (r10 == 0) {
        goto label_15;
    }
    r9d = *((r8 + 0x1c));
    edx = 0;
    if (r9d == 0) {
        goto label_15;
    }
    do {
        ecx = *((r10 + rdx*4));
        if (*((rcx + r8)) == 0x31475349) {
            goto label_16;
        }
        edx++;
    } while (edx < r9d);
label_15:
    edx = 0xffffffff;
label_16:
    if (edx != 0xffffffff) {
label_14:
        if (r8 == 0) {
            goto label_17;
        }
        rcx = *((r14 + 0x28));
        if (rcx == 0) {
            goto label_18;
        }
        if (*((r8 + 0x1c)) <= edx) {
            goto label_18;
        }
        eax = edx;
        ecx = *((rcx + rax*4));
        rax = r8 + 8;
        rax += rcx;
        if (rax == 0) {
            goto label_18;
        }
        rax = *(r15);
        rcx = r15;
        rax = *((rax + 0x18));
        rax = uint64_t (*case.0x180337eae.0)() ();
        rcx = *(r15);
        rbx = rax;
        rax = *((rcx + 8));
        rcx = r15;
        rax = uint64_t (*case.0x180337eae.0)() ();
        r9d = *((rbx + 0x1c));
        r8 = rax;
        var_30h = 1;
        rax = 0x180017ca0;
        var_20h = rax;
        eax = fcn_180009790 (rsi, "Input", r8);
        if (eax < 0) {
            goto label_5;
        }
    }
label_18:
    r8 = *((r14 + 0x20));
    if (r8 == 0) {
        goto label_17;
    }
    r10 = *((r14 + 0x28));
    if (r10 == 0) {
        goto label_17;
    }
    r9d = *((r8 + 0x1c));
    edx = 0;
    if (r9d == 0) {
        goto label_17;
    }
    do {
        ecx = *((r10 + rdx*4));
        if (*((rcx + r8)) == 0x4e47534f) {
            goto label_19;
        }
        edx++;
    } while (edx < r9d);
label_17:
    edx = 0xffffffff;
label_19:
    if (edx != 0xffffffff) {
        goto label_20;
    }
    if (r8 == 0) {
        goto label_21;
    }
    r10 = *((r14 + 0x28));
    if (r10 == 0) {
        goto label_21;
    }
    r9d = *((r8 + 0x1c));
    edx = 0;
    if (r9d == 0) {
        goto label_21;
    }
    do {
        ecx = *((r10 + rdx*4));
        if (*((rcx + r8)) == 0x3547534f) {
            goto label_22;
        }
        edx++;
    } while (edx < r9d);
label_21:
    edx = 0xffffffff;
label_22:
    if (edx != 0xffffffff) {
        goto label_20;
    }
    if (r8 == 0) {
        goto label_23;
    }
    r10 = *((r14 + 0x28));
    if (r10 == 0) {
        goto label_23;
    }
    r9d = *((r8 + 0x1c));
    edx = 0;
    if (r9d == 0) {
        goto label_23;
    }
    do {
        ecx = *((r10 + rdx*4));
        if (*((rcx + r8)) == 0x3147534f) {
            goto label_24;
        }
        edx++;
    } while (edx < r9d);
label_23:
    edx = 0xffffffff;
label_24:
    if (edx != 0xffffffff) {
label_20:
        if (r8 == 0) {
            goto label_25;
        }
        rcx = *((r14 + 0x28));
        if (rcx == 0) {
            goto label_26;
        }
        if (*((r8 + 0x1c)) <= edx) {
            goto label_26;
        }
        eax = edx;
        ecx = *((rcx + rax*4));
        rax = r8 + 8;
        rax += rcx;
        if (rax == 0) {
            goto label_26;
        }
        rax = *(r15);
        rcx = r15;
        rax = *((rax + 0x18));
        rax = uint64_t (*case.0x180337eae.0)() ();
        rcx = *(r15);
        rbx = rax;
        rax = *((rcx + 8));
        rcx = r15;
        rax = uint64_t (*case.0x180337eae.0)() ();
        r9d = *((rbx + 0x20));
        r8 = rax;
        var_30h = 0;
        rax = 0x180017c80;
        var_20h = rax;
        eax = fcn_180009790 (rsi, "Output", r8);
        if (eax < 0) {
            goto label_5;
        }
    }
label_26:
    r9 = *((r14 + 0x20));
    if (r9 == 0) {
        goto label_25;
    }
    r10 = *((r14 + 0x28));
    if (r10 == 0) {
        goto label_25;
    }
    r8d = *((r9 + 0x1c));
    edx = 0;
    if (r8d == 0) {
        goto label_25;
    }
    do {
        eax = *((r10 + rdx*4));
        rax += r9;
        if (*(rax) == 0x3053464c) {
            goto label_27;
        }
        edx++;
    } while (edx < r8d);
    goto label_25;
label_27:
    if (edx != 0xffffffff) {
        if (r8d <= edx) {
            goto label_25;
        }
        rax += 8;
        if (rax == 0) {
            goto label_25;
        }
        rax = *(r15);
        rcx = r15;
        rax = *((rax + 0x10));
        rax = uint64_t (*case.0x180337eae.0)() ();
        if (rax == 0) {
            goto label_25;
        }
        rax = *(r15);
        rcx = r15;
        rax = *((rax + 0x10));
        rax = uint64_t (*case.0x180337eae.0)() ();
        rdx = rax;
        rcx = rsi;
        eax = fcn_180009ea0 ();
        if (eax < 0) {
            goto label_5;
        }
    }
label_25:
    r8 = *((r14 + 0x20));
    if (r8 == 0) {
        goto label_28;
    }
    r10 = *((r14 + 0x28));
    if (r10 == 0) {
        goto label_28;
    }
    r9d = *((r8 + 0x1c));
    ecx = 0;
    if (r9d == 0) {
        goto label_28;
    }
    do {
        edx = *((r10 + rcx*4));
        if (*((rdx + r8)) == 0x4e444c49) {
            goto label_29;
        }
        ecx++;
    } while (ecx < r9d);
    goto label_28;
label_29:
    if (ecx != 0xffffffff) {
        if (r9d <= ecx) {
            goto label_28;
        }
        rax = r8 + 8;
        rax += rdx;
        if (rax == 0) {
            goto label_28;
        }
        r8 = rax + 4;
        if (*((rax + 4)) == 0) {
            goto label_28;
        }
        rdx = "// Debug name: %s\n";
        rcx = rsi;
        fcn_1800ecdb0 ();
    }
label_28:
    rax = *(r15);
    rcx = r15;
    rax = *((rax + 0x48));
    eax = uint64_t (*case.0x180337eae.0)() ();
    if (eax != 0) {
        rdx = "// Pixel Shader runs at sample frequency\n";
        rcx = rsi;
        fcn_1800ecdb0 ();
        rdx = 0x1803836f8;
        rcx = rsi;
        fcn_1800ecdb0 ();
    }
    rax = *(r15);
    rcx = r15;
    rax = *((rax + 0x28));
    al = uint64_t (*case.0x180337eae.0)() ();
    if (al != 0) {
        rax = *(r15);
        rcx = r15;
        rax = *((rax + 0x18));
        rax = uint64_t (*case.0x180337eae.0)() ();
        rbx = rax;
        rdi = "<internal error>";
        r13 = "Undefined";
        if (*((rax + 0x84)) <= 0) {
            if (*((rax + 0x90)) == 0) {
                goto label_30;
            }
        }
        rax = *((rax + 0x90));
        r12 = rdi;
        if (eax <= 3) {
            rcx = "Isoline";
            var_11h = r13;
            var_9h = rcx;
            rcx = "Triangle";
            var_1h = rcx;
            rcx = "Quadrilateral";
            var_7h = rcx;
            r12 = *((rbp + rax*8 - 0x11));
        }
        rdx = "// Tessellation Domain   # of control points\n";
        rcx = rsi;
        fcn_1800ecdb0 ();
        rdx = "// -------------------- --------------------\n";
        rcx = rsi;
        fcn_1800ecdb0 ();
        r9d = *((rbx + 0x84));
        rdx = "// %-20s %20u\n";
        r8 = r12;
        rcx = rsi;
        fcn_1800ecdb0 ();
        rdx = 0x1803836f8;
        rcx = rsi;
        fcn_1800ecdb0 ();
label_30:
        rax = *((rbx + 0x88));
        if (eax == 0) {
            if (*((rbx + 0x8c)) == eax) {
                goto label_0;
            }
        }
        r12 = rdi;
        if (eax <= 4) {
            rcx = "Point";
            var_11h = r13;
            var_9h = rcx;
            rcx = "Line";
            var_1h = rcx;
            rcx = "Clockwise Triangles";
            var_7h = rcx;
            rcx = "Counter-Clockwise Triangles";
            var_fh = rcx;
            r12 = *((rbp + rax*8 - 0x11));
        }
        rax = *((rbx + 0x8c));
        if (eax <= 4) {
            rcx = "Integer";
            var_11h = r13;
            var_9h = rcx;
            rcx = "Integer Power of 2";
            var_1h = rcx;
            rcx = "Odd Fractional";
            var_7h = rcx;
            rcx = "Even Fractional";
            var_fh = rcx;
            rdi = *((rbp + rax*8 - 0x11));
        }
        rdx = "// Tessellation Output Primitive  Partitioning Type \n";
        rcx = rsi;
        fcn_1800ecdb0 ();
        rdx = "// ------------------------------ ------------------\n";
        rcx = rsi;
        fcn_1800ecdb0 ();
        r9 = rdi;
        rdx = "// %-30s %-18s\n";
        r8 = r12;
        rcx = rsi;
        fcn_1800ecdb0 ();
        rdx = 0x1803836f8;
        rcx = rsi;
        fcn_1800ecdb0 ();
    }
label_0:
    if (*((rsi + 0x18)) != 0) {
        *((rsi + 0x20))--;
        rdx = "</font>";
        rcx = rsi;
        fcn_1800ecdb0 ();
    }
    if (*((rsi + 0x1e)) != 0) {
        goto label_31;
    }
    r9 = *((r14 + 0x20));
    if (r9 == 0) {
        goto label_32;
    }
    r10 = *((r14 + 0x28));
    if (r10 == 0) {
        goto label_32;
    }
    r8d = *((r9 + 0x1c));
    edx = 0;
    if (r8d == 0) {
        goto label_32;
    }
    do {
        eax = *((r10 + rdx*4));
        if (*((rax + r9)) == 0x45434649) {
            goto label_33;
        }
        edx++;
    } while (edx < r8d);
    goto label_32;
label_33:
    if (edx != 0xffffffff) {
        if (r8d > edx) {
            rdx = r9 + 8;
            rdx += rax;
        } else {
            edx = 0;
        }
        rcx = rsi;
        eax = fcn_180014930 ();
        if (eax < 0) {
            goto label_5;
        }
    }
label_32:
    rax = &var_19h;
    var_19h = 0;
    r9 = "Level9";
    var_20h = rax;
    r8d = 0x396e6f41;
    rdx = r14;
    eax = fcn_180014da0 (rsi);
    if (eax < 0) {
        goto label_5;
    }
    do {
        rdx = r14;
        rax = &var_19h;
        rcx = rsi;
        var_20h = rax;
        if (eax == 1) {
            goto label_34;
        }
        var_19h++;
        r9 = "Level9";
        r8d = 0x396e6f41;
        eax = fcn_180014da0 (rcx);
    } while (eax >= 0);
    goto label_5;
label_34:
    r9 = "XNA Prepass";
    var_19h = 0;
    r8d = 0x50414e58;
    eax = fcn_180014da0 (rcx);
    if (eax >= 0) {
        rax = &var_19h;
        var_19h = 0;
        r9 = 0x1803871dc;
        var_20h = rax;
        r8d = 0x53414e58;
        rdx = r14;
        eax = fcn_180014da0 (rsi);
        if (eax < 0) {
            goto label_5;
        }
label_31:
        if (*((r14 + 0x40)) == 0) {
            eax = 0x80004005;
        } else {
            if (*((rsi + 0x18)) != 0) {
                r8 = *(str.e0e0e0);
                rdx = "<font color = \"#%s\">";
                rcx = rsi;
                fcn_1800ecdb0 ();
                *((rsi + 0x20))++;
            }
            rdx = r14;
            rcx = rsi;
            eax = fcn_180014530 ();
            if (eax < 0) {
                goto label_5;
            }
            if (*((rsi + 0x18)) != 0) {
                *((rsi + 0x20))--;
                rdx = "</font>";
                rcx = rsi;
                fcn_1800ecdb0 ();
            }
            if (r15 != 0) {
                if (*((rsi + 0x1e)) != 0) {
                    goto label_35;
                }
                if (*((rsi + 0x18)) != 0) {
                    r8 = *(str.a0a0a0);
                    rdx = "<font color = \"#%s\">";
                    rcx = rsi;
                    fcn_1800ecdb0 ();
                    *((rsi + 0x20))++;
                }
                rax = *(r15);
                rcx = r15;
                rax = *((rax + 0x78));
                eax = uint64_t (*case.0x180337eae.0)() ();
                rdx = "// Approximately %i instruction slots used\n";
                rcx = rsi;
                r8d = eax;
                fcn_1800ecdb0 ();
                if (*((rsi + 0x18)) == 0) {
                    goto label_35;
                }
                *((rsi + 0x20))--;
                rdx = "</font>";
                rcx = rsi;
                eax = fcn_1800ecdb0 ();
            }
label_35:
            eax = 0;
        }
    }
label_5:
    r13 = var_80h;
    r12 = var_88h;
    rdi = var_90h;
    rbx = var_d0h;
    rcx = var_17h;
    rcx ^= rsp;
    fcn_18026e150 ();
    return rax;
}
